<input id="pac-input" class="controls" type="text" placeholder="Search Box">
<div id="map"></div>

<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
        
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <label for="message-text" class="form-control-label">Message:</label>
                        <textarea class="form-control" id="message-text"></textarea>
                    </div>
                </form>
            </div>
            
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" data-dismiss="modal" onclick="markerDelete()">Delete</button>
                <button type="button" class="btn btn-primary" data-dismiss="modal" onclick="updateMemo()">Save changes</button>
            </div>
        </div>
    </div>
</div>

<script>
    var map;
    var markers; // use for delete markers
    var marker_table; // use for delete marker at database

    var $messageText = document.getElementById('message-text');

    var addMarker = (marker_id, location, map) => {
        var marker = new google.maps.Marker({
            position : location,
            draggable : true,
            map : map
        });

        marker_table.set(marker, marker_id);

        marker.addListener('click', function(event) {
            console.log(event.latLng.lat() +',' + event.latLng.lng());
            markers = marker;
            getMemo(marker_table.get(markers));
            $('#myModal').modal('show');
        });
    }

    function initMap() {
        marker_table = new Map();
        map = new google.maps.Map(document.getElementById('map'), {
            center: {lat: 37, lng: 127},
            zoom: 4,
            disableDefaultUI: true,
            styles : [
              {elementType: 'geometry', stylers: [{color: '#ebe3cd'}]},
              {elementType: 'labels.text.fill', stylers: [{color: '#523735'}]},
              {elementType: 'labels.text.stroke', stylers: [{color: '#f5f1e6'}]},
              {
                featureType: 'administrative',
                elementType: 'geometry.stroke',
                stylers: [{color: '#c9b2a6'}]
              },
              {
                featureType: 'administrative.land_parcel',
                elementType: 'geometry.stroke',
                stylers: [{color: '#dcd2be'}]
              },
              {
                featureType: 'administrative.land_parcel',
                elementType: 'labels.text.fill',
                stylers: [{color: '#ae9e90'}]
              },
              {
                featureType: 'landscape.natural',
                elementType: 'geometry',
                stylers: [{color: '#dfd2ae'}]
              },
              {
                featureType: 'poi',
                elementType: 'geometry',
                stylers: [{color: '#dfd2ae'}]
              },
              {
                featureType: 'poi',
                elementType: 'labels.text.fill',
                stylers: [{color: '#93817c'}]
              },
              {
                featureType: 'poi.park',
                elementType: 'geometry.fill',
                stylers: [{color: '#a5b076'}]
              },
              {
                featureType: 'poi.park',
                elementType: 'labels.text.fill',
                stylers: [{color: '#447530'}]
              },
              {
                featureType: 'road',
                elementType: 'geometry',
                stylers: [{color: '#f5f1e6'}]
              },
              {
                featureType: 'road.arterial',
                elementType: 'geometry',
                stylers: [{color: '#fdfcf8'}]
              },
              {
                featureType: 'road.highway',
                elementType: 'geometry',
                stylers: [{color: '#f8c967'}]
              },
              {
                featureType: 'road.highway',
                elementType: 'geometry.stroke',
                stylers: [{color: '#e9bc62'}]
              },
              {
                featureType: 'road.highway.controlled_access',
                elementType: 'geometry',
                stylers: [{color: '#e98d58'}]
              },
              {
                featureType: 'road.highway.controlled_access',
                elementType: 'geometry.stroke',
                stylers: [{color: '#db8555'}]
              },
              {
                featureType: 'road.local',
                elementType: 'labels.text.fill',
                stylers: [{color: '#806b63'}]
              },
              {
                featureType: 'transit.line',
                elementType: 'geometry',
                stylers: [{color: '#dfd2ae'}]
              },
              {
                featureType: 'transit.line',
                elementType: 'labels.text.fill',
                stylers: [{color: '#8f7d77'}]
              },
              {
                featureType: 'transit.line',
                elementType: 'labels.text.stroke',
                stylers: [{color: '#ebe3cd'}]
              },
              {
                featureType: 'transit.station',
                elementType: 'geometry',
                stylers: [{color: '#dfd2ae'}]
              },
              {
                featureType: 'water',
                elementType: 'geometry.fill',
                stylers: [{color: '#b9d3c2'}]
              },
              {
                featureType: 'water',
                elementType: 'labels.text.fill',
                stylers: [{color: '#92998d'}]
              }
            ]
        });

        // Create the DIV to hold the control and call the makeInfoBox() constructor
        // passing in this DIV.
        /*var infoBoxDiv = document.createElement('div');
        var infoBox = new makeInfoBox(infoBoxDiv, map);
        infoBoxDiv.index = 1;
        map.controls[google.maps.ControlPosition.TOP_CENTER].push(infoBoxDiv);*/

        map.addListener('rightclick', function(event) {
            addMarkerToDB(event.latLng.lat(), event.latLng.lng(), map);
        });

        $.get("/getAllMarker", function(data) {
            for (var i = 0; i < data.length; i++) {
                addMarker(data[i]._id,new google.maps.LatLng(data[i].location_lat,data[i].location_lng),map);
            }
        })

        initAutocomplete(map);
    }

    function addMarkerToDB(lat, lng, map) {
        $.ajax({
            url : '/addMarker',
            dataType : 'json',
            type : 'POST',
            data : {'location_lat' : lat,'location_lng' : lng}
        }).done(function(result) {
            addMarker(result, new google.maps.LatLng(lat,lng), map);
        })
    } 
    
    function markerDelete() {
        if (markers !== null) {
            var marker_id = marker_table.get(markers);
        } else {
            alert("Error");
        }

        if (marker_id !== undefined) {
            $.post("/removeMarker", {_id : marker_id}, function(data) {
                if (data === 'success') {
                    markers.setMap(null);
                }
            });
        }
    }

    function updateMemo() {
        var data;
        if (markers !== null || $messageText.value !== '') {
            data = {
                _id : marker_table.get(markers),
                location_memo : $messageText.value
            }
        }
        $.post("/updateMemo", data, function(result) {
            if (result) {
                $messageText.value = result;
            }
        })
    }
    
    function getMemo(marker_id) {
       
        $.post("/getMemo", {_id : marker_id }, function(data) {
            $messageText.value = data;
        })

    }

    function makeInfoBox(controlDiv, map) {
        // Set CSS for the control border.
        var controlUI = document.createElement('div');
        controlUI.style.boxShadow = 'rgba(0, 0, 0, 0.298039) 0px 1px 4px -1px';
        controlUI.style.backgroundColor = '#fff';
        controlUI.style.border = '2px solid #fff';
        controlUI.style.borderRadius = '2px';
        controlUI.style.marginBottom = '22px';
        controlUI.style.marginTop = '10px';
        controlUI.style.textAlign = 'center';
        controlDiv.appendChild(controlUI);

        // Set CSS for the control interior.
        var controlText = document.createElement('div');
        controlText.style.color = 'rgb(25,25,25)';
        controlText.style.fontFamily = 'Roboto,Arial,sans-serif';
        controlText.style.fontSize = '100%';
        controlText.style.padding = '6px';
        controlText.innerText = 'The map shows all clicks made in the last 10 minutes.';
        controlUI.appendChild(controlText);
    }

      function initAutocomplete(map) {
          
        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
            searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();

          if (places.length == 0) {
            return;
          }

          // Clear out the old markers.
          markers.forEach(function(marker) {
            marker.setMap(null);
          });
          markers = [];

          // For each place, get the icon, name and location.
          var bounds = new google.maps.LatLngBounds();
          places.forEach(function(place) {
            if (!place.geometry) {
              console.log("Returned place contains no geometry");
              return;
            }
            var icon = {
              url: place.icon,
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(25, 25)
            };

            // Create a marker for each place.
            markers.push(new google.maps.Marker({
              map: map,
              icon: icon,
              title: place.name,
              position: place.geometry.location
            }));

            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
          });
          map.fitBounds(bounds);
        });
      }


</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCRpwa5kVz8v0POPFz0pr0gDax-BK467Uk&libraries=places&callback=initMap"async defer></script>